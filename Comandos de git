COMANDOS DE GIT

    git
    /*Ver version de git*/
    git --version
    /*Cambiar nombre*/
    git config --global user.name "Gerardo Fragoso"
    /*Ver nombre*/
    git config user.name
    /*Cambiar email*/
    git config --global user.email "gerard1528@hotmail.com"
    /*Ver email*/
    git config user.email
    /*Cambiar color del CMD de git*/
    git config --global color.ui true

    /*---------------------PASOS PARA AGREGAR VERSIONES EN GIT---------------------*/
    /*Para crear nuevo repositorio dentro de la carpeta deseada*/
    git init 
    /*Nos permite ver el estado actual del repositorio*/
    git status
    /*Para agregar un archivo al staying index y agregarlo futuramente a una nueva version*/
    git add index.html //por ejemplo
    /*Ahora para guardar una nueva version se hace lo siguiente*/
    git commit -m "Poner descripcion max 50 caracteres - (Tiene que decir que estamos modificando de nuestro sitio)"
    EJEMPLO : git commit -m "Agregando index.html"
    /*---------------------PARA VOLVER A GUARDAR NUEVA VERSION---------------------*/
    /*Para agregar mas de 1 archivo y no estar escribiendo nombre por nombre solo ponemos lo sig*/
    git add .
    /*Despues volvemos a poner */
    git commit -m "Agregando estructura basica de HTML"
    /*Para quitar archivos del staying index -- rm=remove*/
    git rm --cached index.html
    /*---------------------PARA EVITA QUE ARCHIVOS NO SE AGREGEN A GIT---------------------*/
    /*Se crea un archivo .gitignore*/
    *.psd --> Ignorame todos los archivos .psd
    contacto.html --> Ignorame el archivo contacto.html

    /*---------------------OTROS COMANDOS---------------------*/

    /*Nos permite traer todos los commits que hemos hecho*/
    git log
    /*Para ver las estadisticas del commit (Cuantos archivos fueron modificados, cantas inserciones tuvimos y cuantas borradas)*/
    git log --stat
    /*Nos muestra todo el historial pero solo en 1 sola linea*/
    git log --oneline
    /*Nos muestra una grafica (Sirve cuando trabajamos con ramas)*/
    git log --graph
    /*Ejecuta todo en conjunto*/
    git log --oneline --graph --all
    /*Me dice cual es la diferencia entre el commit pasado y el contenido que acabamos de crear '+*#$#*+' (Te muestra lo que se ha cambiado pero no se ha creado nueva version desde la pasada)*/
    git diff
    /*NOTA: Escribir "q" para salir de la pantalla de git diff*/
    /*Para comparar mi contenido actual con el de algun commit x (Nos muestra lo que se ha cambiado hasta el momento)*/ '+*#$#*+'
    git diff b45d597 index.html --> (Los ultimos numeros son el identificador del commit y lo podemos ver si ejecutamos "git log --oneline")
    /*Para regresar al commit en el que tenia tal contenido se hace lo siguiente (regresar a una version anterior)*/
    git checkout 2a61753 --> (Hay que tener cuidado porque se borrara lo que hicimos entre esas versiones) '+*#$#*+'

    /*---------------------BRANCHES O RAMAS EN GIT---------------------*/
    /*Nos permite conocer todas las ramas que tenemos*/
    git branch
    /*Para juntar un commit pasado y regresarlo con el codigo original se hace esto:*/
    merge
    /*Nos permite pasarle un parametro que es el de master y poder cambiar a la rama de master
    git checkout master
    /*Para crear una nueva rama*/
    git checkout -b nombredelarama
    /*Para cambiar de rama escribimos*/ 
    git checkout master / git checkout experimento / etc (NOTA: No se borran los datos siempre y cuando sea entre ramas y no entre versiones) '+*#$#*+'
    /*Para juntar las ramas se hace lo siguiente*/
    git merge experimento --> (Queremos que nuestra rama de experimento me la juntes con la de master)
    /*Para borrar una rama se hace lo siguiente*/
    git branch -d experimento -->(Despues de juntar las 2 ramas master y experimento si queremos la podemos borrar ya que hemos salvado los cambios)
    /*Para agregar cambios a github*/
    git push -u origin master
    /*Para descargar codigo con cambios hechos en github*/
    git pull origin master